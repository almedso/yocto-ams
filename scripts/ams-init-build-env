#!/usr/bin/env bash
#-----------------------------------------------------------------------------
# Copyright (c) 2019, 2020, 2021 almedso GmbH
# SPDX-License-Identifier: MIT
#
# !!! THIS SCRIPT NEEDS TO BE SOURCED. !!!
# !!! if not sourced it writes what it would do. !!!
#
#-----------------------------------------------------------------------------
# Notes to the maintainer of this script.
#
# - DO NOT modify this script in project root folder. It is just copied from
#   its original location at "sources/ams/scripts/ams-init-build-env"
#
# - Never return with exit code different from 0 because the shell just
#   terminates and the terminal session might be gone.
# - Sourcing a script does not allow to pass on command line arguments.
#   All varialbilities need to be injected by environment variables
#
#-----------------------------------------------------------------------------
# Global variables
#

[ "$DEBUG" == 'true' ] && set -x  # aka set -o xtrace


#-----------------------------------------------------------------------------
# Local functions

clean_up ()
{
   unset CWD ARGS PROGNAME
   unset BUILD_DIR
   unset AMS_SCRIPT_VERSION
   unset AMS_BUILD_DIR
   unset AMS_TEMPLATE_LAYER_ROOT_DIR
   unset OPTIND
   set +x  # aka set +o xtrace
   set +o pipefail
}

init_variables () {
    # input - possibly injected from environment
    AMS_PACKAGE_FEED_BASE_PATHS=${PACKAGE_FEED_BASE_PATHS:-"feeds"}
    AMS_BUILD_DIR=${BUILD_DIR:-"build"}

}

usage ()
{
   echo -e "\nUsage: source $PROGNAME template_dir

   Establish a new build environment in '$BUILD_DIR':
   - create local.conf from template
   - create bblayer.conf from template
   - optionally create site.conf from existing site.conf.sample in project dir.


   Control variables (to be evaluated when sourced)

   BUILD_DIR
      specifies build directory location; default is 'build'


   TEMPLATE_LAYER_ROOT_DIR
      specifies the Layer where the template is created from
	  default is 'sources/ams/meta-ams'
   TEMPLATE
      specifies the templates to be applied in case; default 'default'

   if site.conf does not exist it is build.
   if a site.conf.sample template exists in project root it is used
   if no template exists site.conf is generated
      DL_DIR (if not set - "/yocto/cache/download" is added to site.conf)
      SSTATE_DIR (if not set - "/yocto/cache/${DISTRO}-${YOCTO_VERSION}" is added to site.conf)

      Furthermore:
      PARALLEL_MAKE & BB_NUMBER_THREADS is set according to computing capabilities
   "
}

# TODO remove if linked and not copied.
keep_this_script_in_sync () {
	# if this script differes from source copy it over from its original place
	if ! cmp -s ${MKP_SCRIPTPATH}/${MKP_SCRIPTNAME} ${MKP_SCRIPTPATH}/sources/meta-digi/sdk/${MKP_SCRIPTNAME}; then
		install -m 0555 ${MKP_SCRIPTPATH}/sources/meta-digi/sdk/${MKP_SCRIPTNAME} ${MKP_SCRIPTPATH}/${MKP_SCRIPTNAME}
		printf "\n${MKP_GREEN}[INFO]:${MKP_NONE} %s\n" "the '${MKP_SCRIPTNAME}' script has been updated."
		printf "\nPlease run '. ${BASH_SOURCE}' again.\n\n"
		return
	fi
}

sanity_checks ()
{

   if [ "$(whoami)" = "root" ]; then
      echo "ERROR: do not use the BSP as root."
      echo "       Sourcing the script failed"
      return 1
   fi
   if [ ! -d "$(pwd)/sources/ams" ]; then
      echo "ERROR: ./sources/ams does not exist"
      echo "       This script should be invoked from yocto project root directory"
      echo "       Sourcing the script failed"
      return 1
   fi
   if [ ! -d "$(pwd)/sources/poky" ]; then
      echo "ERROR: ./sources/poky does not exist"
      echo "       This script should be invoked from yocto project root directory"
      echo "       Sourcing the script failed"
      return 1
   fi
}

# Expected optional parameters:
# $1 = template - default is not-set
# $2 = template - default is meta-ams
#
# Result as site effect if template folder exists
# TEMPLATECONF var set
# BUILD_DIR variable is set
set_layer_and_template_vars ()
{
	local TEMPLATE=${1:-"not-set"}
	local LAYER=${2:-"meta-ams"}
	if [ "${TEMPLATE}" != "not-set" ]; then
	 	TEMPLATECONF=$(pwd)/$(find sources -type d -name ${LAYER})/conf/templates/${TEMPLATE}
		if [ -d ${TEMPLATECONF} ]; then
			BUILD_DIR="build-${TEMPLATE}"
		else
			echo "ERROR: template and layer do not point to a valid template directory"
			echo "       ${TEMPLATECONF} does not exist"
            echo "       Sourcing the script failed"
			unset TEMPLATECONF
            return 1
		fi
    fi
	printf "\nUse template ${TEMPLATE} from layer ${LAYER}\n\n"
}

write_site_conf ()
{
	# when called currend working directory is already the build directory
   	if [ -d conf ] && [ ! -f conf/site.conf ]; then
		local SITECONF=""
   		# write site.conf only if it does not exist
   		# i.e. never ever modify if it exists or the conf directory does not exist
       	if [ -f ../site.conf.sample ]; then
			SITECONF="../site.conf.sample"
		fi
       	if [ -f ../site.conf ]; then
			SITECONF="../site.conf"
		fi
        if [ -n ${SITECONF} ]; then
			printf "\nUpdate site.conf - from sample in project root\n"
		    cp $SITECONF conf/site.conf
		    local NCPU=$(grep -c processor /proc/cpuinfo)
		    echo "BB_NUMBER_THREADS = \"${NCPU}\" " >> conf/site.conf
		    echo "PARALLEL_MAKE = \"-j ${NCPU}\" " >> conf/site.conf
   	   	else
			printf "\nSite.conf template not found, no site.conf established\n"
		fi
   fi
}

init_bitbake ()
{
	source sources/poky/oe-init-build-env ${BUILD_DIR}
	unset TEMPLATECONF
	unset BUILD_DIR
    # now we cd'ed into the ${BUILD_DIR}
    write_site_conf
}

main ()
{
   init_variables
   set_layer_and_template_vars $1 $2
   if sanity_checks; then
      init_bitbake
      write_site_conf
   fi
   clean_up
}

# execute main
if [ "${BASH_SOURCE[0]}" != "${0}" ] ; then
   	# callage via sourcing => ok
   	case ${BASH_SOURCE[0]} in
	   	ams-init-build-env)
   		   	main default
		  	;;
	   	phyimx8-init-build-env)
   		   	main phyimx8 meta-ams-bsp
		  	;;
	   	stm32m-init-build-env)
   		   	main stmp32m meta-ams-bsp
		  	;;
	   	*)
   		   	main $1 $2
		  	;;
	esac
else
   echo "!!! ERROR: This script should be sourced !!!"
   usage
   exit 1
fi
