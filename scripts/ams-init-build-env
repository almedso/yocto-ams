#!/usr/bin/env bash
#-----------------------------------------------------------------------------
# Copyright (c) 2019-2024, almedso GmbH
# SPDX-License-Identifier: MIT
#
# !!! THIS SCRIPT NEEDS TO BE SOURCED. !!!
# !!! if not sourced it writes what it would do. !!!
#
#-----------------------------------------------------------------------------
# Notes to the maintainer of this script.
#
# - DO NOT modify this script in project root folder. It is just copied from
#   its original location at "sources/ams/scripts/ams-init-build-env"
#
# - Never return with exit code different from 0 because the shell just
#   terminates and the terminal session might be gone.
# - Sourcing a script does not allow to pass on command line arguments.
#   All varialbilities need to be injected by environment variables
#
#-----------------------------------------------------------------------------
# Global variables
#

[ "$DEBUG" == 'true' ] && set -x  # aka set -o xtrace


#-----------------------------------------------------------------------------
# Local functions

clean_up ()
{
  set +x  # aka set +o xtrace
  set +o pipefail
}

usage ()
{
  echo -e "\nUsage: source ams-init-build-env TEMPLATE LAYER

  1) Establish a new build environment in 'build-$TEMPLATE' (if it does not exist):
     - create local.conf from template
     - create bblayer.conf from template
     - optionally create site.conf from existing site.conf.sample in project dir.
  2) Source the (newly created or existing) build environment via 

  It must be sourced from project root directory.

  Arguments:
    TEMPLATE - The template to derive local.conf and bbayers.conf from
             - It is optional, if not present default from poky is used
    LAYER:   - The layer in which the template is defined.
               It is optional, if not present the template is searched in
               'meta-ams'

  If a site.conf.sample template or a site.conf exists in project root it is used

  Furthermore, generated  site.conf is extended (if it exits):
  PARALLEL_MAKE & BB_NUMBER_THREADS is set according to computing capabilities

  Sourcing Shortcut:
    source <TEMPLATE>[@LAYER(w/o meta)-init-build-env]

    The init script will self-extract template name and optional layer name w/o meta
    from its name if located in project root directory.
  "
}

sanity_checks ()
{

   if [ "$(whoami)" = "root" ]; then
      echo "ERROR: do not use the BSP as root."
      echo "       Sourcing the script failed"
      return 1
   fi
   if [ ! -d "$(pwd)/sources/ams" ]; then
      echo "ERROR: ./sources/ams does not exist"
      echo "       This script should be invoked from yocto project root directory"
      echo "       Sourcing the script failed"
      return 1
   fi
   if [ ! -d "$(pwd)/sources/poky" ] && [ ! -d "$(pwd)/sources/openembedded-core" ]; then
      echo "ERROR: ./sources/poky or ./sources/openembedded-core does not exist"
      echo "       This script should be invoked from yocto project root directory"
      echo "       Sourcing the script failed"
      return 1
   fi
}

# Expected optional parameters:
# $1 = template - default is not-set
# $2 = layer - default is meta-ams
#
# Result as site effect if template folder exists
# TEMPLATECONF var set
# BUILD_DIR variable is set
set_layer_and_template_vars ()
{
  local TEMPLATE=${1:-"not-set"}
  local LAYER=${2:-"meta-ams"}
  declare -g BUILD_DIR="build"
  if [ "${TEMPLATE}" != "not-set" ]; then
      local LAYER_REL_PATH=""
      while read LAYER_REL_PATH; do
        TEMPLATECONF="$(pwd)/${LAYER_REL_PATH}/conf/templates/${TEMPLATE}"
        if [ -d ${TEMPLATECONF} ]; then
            BUILD_DIR="build-${TEMPLATE}"
            break
         fi
      done <<< "$(find sources -type d -name "${LAYER}")"
    if [ ${BUILD_DIR} = "build" ]; then
      echo "ERROR: Template \"${TEMPLATE}\" not found in a layer \"${LAYER}\"."
         echo "       Sourcing the script failed"
      unset TEMPLATECONF
         unset BUILD_DIR
         return 1
    fi
   fi
  printf "\nUse template ${TEMPLATE} from layer ${LAYER}\n\n"
}

write_site_conf ()
{
  # when called currend working directory is already the build directory
  if [ -d conf ] && [ ! -f conf/site.conf ]; then
    local SITECONF=""
    # write site.conf only if it does not exist
    # i.e. never ever modify if it exists or the conf directory does not exist
    if [ -f ../site.conf.sample ]; then
      SITECONF="../site.conf.sample"
    fi
    if [ -f ../site.conf ]; then
      SITECONF="../site.conf"
    fi
    if [ -n ${SITECONF} ]; then
      printf "\nUpdate site.conf - from sample in project root\n"
      cp $SITECONF conf/site.conf
      local NCPU=$(grep -c processor /proc/cpuinfo)
      echo "BB_NUMBER_THREADS = \"${NCPU}\" " >> conf/site.conf
      echo "PARALLEL_MAKE = \"-j ${NCPU}\" " >> conf/site.conf
    else
      printf "\nSite.conf template not found, no site.conf established\n"
    fi
  fi
}

init_bitbake ()
{
  # be robust if openembedded-core is available
  if [ -d sources/openembedded-core ]; then
    printf "\nSource init script from openembedded-core\n"
    source sources/openembedded-core/oe-init-build-env ${BUILD_DIR}
  else
    printf "\nSource init script from poky\n"
    source sources/poky/oe-init-build-env ${BUILD_DIR}
  fi
  unset TEMPLATECONF
  unset BUILD_DIR
  # now we cd'ed into the ${BUILD_DIR}
  write_site_conf
}

main ()
{
  if set_layer_and_template_vars $1 $2; then
     if sanity_checks; then
        init_bitbake
        write_site_conf
     fi
  fi
  clean_up
}

split_template_and_layer_from_command_name_and_invoke_main ()
{
  # Args: $1 - full command name
  #
  # command name is something like <template>@<layer w/o meta- prefix>-init-build-env
  # example: "variscite-not-integrated@ams-init-bild-env"
  #   template name is "variscite-not-integrated"
  #   layer name is "meta-ams"
  # the layer extension is optional - in this case the delimiter '_' does not exist
  # example: "variscite-not-integrated-init-bild-env"
  #   template name is "variscite-not-integrated"
  #   layer is skipped and the default layer is used
  local cmd_prefix=${1%-init-build-env}
  cmd_prefix=${cmd_prefix#./}
  local arr=(${cmd_prefix//@/ })
  local template=${arr[0]}
  local layer=${arr[1]}
  if [ -n "$layer" ]; then
    main $template "meta-$layer"
  else
    main $template
  fi
}

# execute main
if [ "${BASH_SOURCE[0]}" != "${0}" ] ; then
   # callage via sourcing => ok
   case ${BASH_SOURCE[0]} in
     *-init-build-env)
       split_template_and_layer_from_command_name_and_invoke_main ${BASH_SOURCE[0]}
       ;;
     *)
       main $1 $2
       ;;
  esac
else
   echo "!!! ERROR: This script should be sourced !!!"
   usage
   exit 1
fi
